/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SizeService } from "../size.service";
import { SizeCreateInput } from "./SizeCreateInput";
import { Size } from "./Size";
import { SizeFindManyArgs } from "./SizeFindManyArgs";
import { SizeWhereUniqueInput } from "./SizeWhereUniqueInput";
import { SizeUpdateInput } from "./SizeUpdateInput";

export class SizeControllerBase {
  constructor(protected readonly service: SizeService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Size })
  async createSize(@common.Body() data: SizeCreateInput): Promise<Size> {
    return await this.service.createSize({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        size: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Size] })
  @ApiNestedQuery(SizeFindManyArgs)
  async sizes(@common.Req() request: Request): Promise<Size[]> {
    const args = plainToClass(SizeFindManyArgs, request.query);
    return this.service.sizes({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        size: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Size })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async size(
    @common.Param() params: SizeWhereUniqueInput
  ): Promise<Size | null> {
    const result = await this.service.size({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        size: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Size })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSize(
    @common.Param() params: SizeWhereUniqueInput,
    @common.Body() data: SizeUpdateInput
  ): Promise<Size | null> {
    try {
      return await this.service.updateSize({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          size: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Size })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSize(
    @common.Param() params: SizeWhereUniqueInput
  ): Promise<Size | null> {
    try {
      return await this.service.deleteSize({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          size: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
